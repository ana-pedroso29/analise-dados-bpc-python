# app.py (vers√£o com multi-sele√ß√£o e gr√°fico comparativo)

import streamlit as st
import pandas as pd
import plotly.express as px
from config import ARQUIVO_CONSOLIDADO # Importa o nome do arquivo correto

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(layout="wide")
st.title("üîé BPC Insight: An√°lise Comparativa de Inconsist√™ncias")

# --- Carregamento dos Dados ---
@st.cache_data # Isso acelera o carregamento em execu√ß√µes futuras
def carregar_dados():
    """
    Carrega os dados consolidados do pipeline.
    """
    try:
        df = pd.read_csv(ARQUIVO_CONSOLIDADO)
        return df
    except FileNotFoundError:
        return None

df_final = carregar_dados()

# --- Verifica√ß√£o e Exibi√ß√£o do Dashboard ---
if df_final is None:
    st.error(f"Arquivo '{ARQUIVO_CONSOLIDADO}' n√£o encontrado. Por favor, execute o script 'run_pipeline.py' primeiro para gerar os dados.")
else:
    # --- BARRA LATERAL COM FILTROS ---
    st.sidebar.header("Filtros de An√°lise")
    
    # Filtro de Ano (multi-sele√ß√£o)
    anos_disponiveis = sorted(df_final['ANO'].unique(), reverse=True)
    anos_selecionados = st.sidebar.multiselect("Selecione o(s) Ano(s):", options=anos_disponiveis, default=anos_disponiveis[0:1])
    
    # Filtro de M√™s (multi-sele√ß√£o)
    meses_disponiveis = sorted(df_final['MES'].unique())
    meses_selecionados = st.sidebar.multiselect("Selecione o(s) M√™s(es):", options=meses_disponiveis, default=meses_disponiveis)

    # Filtro de Estado (UF) (multi-sele√ß√£o)
    ufs_disponiveis = sorted(df_final['UF'].unique())
    ufs_selecionadas = st.sidebar.multiselect(
        "Selecione o(s) Estado(s) (UF):",
        options=ufs_disponiveis,
        default=ufs_disponiveis[:5] # Seleciona os 5 primeiros por padr√£o
    )
    
    # Filtro de Status (Outlier/Normal)
    status_selecionado = st.sidebar.radio(
        "Mostrar munic√≠pios:",
        options=['Todos', 'Apenas com Inconsist√™ncia', 'Apenas Normais'],
        index=0 # 'Todos' como padr√£o para a vis√£o comparativa
    )

    # --- Aplica√ß√£o dos Filtros ---
    df_filtrado = df_final[
        (df_final['ANO'].isin(anos_selecionados)) & 
        (df_final['MES'].isin(meses_selecionados)) &
        (df_final['UF'].isin(ufs_selecionadas))
    ]
    
    if status_selecionado == 'Apenas com Inconsist√™ncia':
        df_filtrado = df_filtrado[df_filtrado['is_outlier'] == 'INCONSIST√äNCIA']
    elif status_selecionado == 'Apenas Normais':
        df_filtrado = df_filtrado[df_filtrado['is_outlier'] == 'NORMAL']
    
    # --- PAINEL PRINCIPAL ---
    st.header(f"An√°lise Comparativa para o Per√≠odo Selecionado")

    if df_filtrado.empty:
        st.warning("Nenhum dado encontrado com os filtros selecionados.")
    else:
        # M√©tricas Chave do per√≠odo
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Munic√≠pios na Sele√ß√£o", f"{df_filtrado['IBGE_COD'].nunique():,}")
        col2.metric("Valor Total Pago no Per√≠odo", f"R$ {df_filtrado['soma_valor'].sum():,.2f}")
        col3.metric("Total de Inconsist√™ncias", f"{len(df_filtrado[df_filtrado['is_outlier'] == 'INCONSIST√äNCIA']):,}")

        # --- NOVO GR√ÅFICO COMPARATIVO POR ESTADO E ANO ---
        st.subheader("Comparativo de Valor Pago por Estado e Ano")
        
        # Agrupa os dados por UF e Ano para o gr√°fico
        df_grafico = df_filtrado.groupby(['UF', 'ANO'])['soma_valor'].sum().reset_index()

        fig_bar = px.bar(
            df_grafico,
            x="UF",
            y="soma_valor",
            color="ANO",
            barmode="group", # Cria barras agrupadas por ano
            title="Valor Total Pago (R$) por Estado e Ano",
            labels={'soma_valor': 'Soma do Valor Pago (R$)', 'UF': 'Estado', 'ANO': 'Ano'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)

        # --- Tabela de Dados Detalhada ---
        st.subheader("Dados Detalhados dos Munic√≠pios")
        st.dataframe(df_filtrado.style.format({
            'soma_valor': 'R$ {:,.2f}',
            'media_valor': 'R$ {:,.2f}',
            'total_beneficios': '{:,}',
        }))